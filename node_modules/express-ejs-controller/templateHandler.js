var path = require("path");
var ejs = require("ejs");

var TemplateHandler = function(currentFolderName)
{
    this.basePath = "ejs";
    this.layoutFile = "main.ejs"
    this.currentFolderName = currentFolderName;
    this.fieldTemplateDictionary = this.initializeTemplateDictionary();
    this.defaultFieldTemplate = path.resolve(__dirname, "partials/textField.ejs");
}

TemplateHandler.prototype.getLayoutLocation = function()
{
    return path.resolve(this.basePath, this.layoutFile);
}

TemplateHandler.prototype.getCurrentPath = function()
{
    return path.resolve(this.basePath, this.currentFolderName);
}

TemplateHandler.prototype.initializeTemplateDictionary = function initializeTemplateDictionary()
{
    var fieldTemplateDictionary = new Object();    
    fieldTemplateDictionary.number = path.resolve(__dirname, "partials/numberField.ejs");
    fieldTemplateDictionary.date = path.resolve(__dirname, "partials/dateField.ejs");
    return fieldTemplateDictionary;
}

TemplateHandler.prototype.getFileToRender = function getFileToRender(fileName)
{
    return path.resolve(this.getCurrentPath(), fileName);
}

TemplateHandler.prototype.getFieldTemplate = function(field)
{
    if(typeof field !== "object" || Array.isArray(field)) return null;
    if(field.customTemplate && this.fieldTemplateDictionary[field.customTemplate]) return this.fieldTemplateDictionary[field.customTemplate];
    return this.fieldTemplateDictionary[field.type]? this.fieldTemplateDictionary[field.type] : this.defaultFieldTemplate;
}

TemplateHandler.prototype.getFieldCollectionToRender = function(schema)
{
    var fieldToRenderCollection = [];
    for(var property in schema)
    {
        var templateFile = this.getFieldTemplate(schema[property])
        if(templateFile == null) continue;
        fieldToRenderCollection.push({ fieldName: property, templatePath: templateFile });
    }
    return fieldToRenderCollection;
}

TemplateHandler.prototype.renderPage = function renderPage(objectToRender)
{
    return ejs.renderFile(this.getLayoutLocation(), objectToRender, (error, page) => 
    {
        if(error) return Promise.reject(error); 
        return Promise.resolve(page);
    })
}

module.exports = TemplateHandler;
