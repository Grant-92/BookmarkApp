var RestController = require("express-rest-controller");
var Router = require("./router");
var TemplateHandler = require('./templateHandler');

var EjsController = function PresentationController(model, options)
{
    RestController.apply(this, [model]);
    this.router = new Router(this.collection.modelName);
    this.templateHandler = new TemplateHandler(this.collection.modelName);
    if(options)
    {
        if(options.translate) this.translate = options.translate;
        console.log(this.translate);
    }
}

EjsController.prototype = Object.create(RestController.prototype);

EjsController.prototype.translate = function(textToTranslate)
{
    console.warn("you need to set a translation library")
    return textToTranslate;
}

EjsController.prototype.getObjectToRender = function getObjectToRender(data, filePath)
{
    var objectToRender = {
        data: data, 
        fileName: filePath,
        translate: this.translate,
        controller: this,
        schema: this.collection.schema.obj
    };
    return objectToRender;
}

EjsController.prototype.renderPage = function renderPage(data, filePath)
{
    var objectToRender = this.getObjectToRender(data, filePath);
    return this.templateHandler.renderPage(objectToRender);
}

EjsController.prototype.handlePromise = function handlePromise(promise, response, file)
{
    if(!file) file = arguments.callee.caller.name;
    return promise
        .then(success => this.renderPage(success, this.templateHandler.getFileToRender(file)))
        .then(page => response.send(page))
        .catch(error => console.log(error));
}

EjsController.prototype.getNewPage = function getNewPage(request, response)
{
    return this.renderPage(null, this.collection.modelName + "/new")
        .then(page => response.send(page))
        .catch(error => response.send(error));
}

EjsController.prototype.getFindPage = function getFindPage(request, response)
{
    var findPromise = this.collection.find();
    return this.handlePromise(findPromise, response, "find");
}

EjsController.prototype.getFindByIdPage = function getFindByIdPage(request, response)
{
    var findPromise = this.collection.findById(request.params.id);
    return this.handlePromise(findPromise, response, "findById");
}

EjsController.prototype.create = function create(request, response)
{
    var createPromise = this.collection.create(request.body);
    createPromise.then(success => response.redirect(this.router.getPath(success._id)))
}

EjsController.prototype.findByIdAndUpdate = function(request, response)
{
    var updatePromise = this.collection.findByIdAndUpdate(request.params.id , request.body);
    updatePromise.then(success => response.redirect(this.router.getPath(success._id)))
}

EjsController.prototype.findByIdAndDelete = function(request, response)
{
    var deletePromise = this.collection.findByIdAndDelete(request.params.id);
    deletePromise.then(success => response.redirect(this.router.getPath()))
}

EjsController.prototype.registerRouteCollection = function registerRouteCollection(application)
{
    application.get(this.router.getPath("new"), this.getNewPage.bind(this));
    application.get(this.router.getPath(), this.getFindPage.bind(this));
    application.get(this.router.getPath(":id"), this.getFindByIdPage.bind(this));
    application.post(this.router.getPath(), this.create.bind(this));
    application.post(this.router.getPath(":id"), this.findByIdAndUpdate.bind(this));
    application.post(this.router.getPath(":id/delete"), this.findByIdAndDelete.bind(this));
}

module.exports = EjsController;
